{"version":3,"sources":["components/header.js","helpers/localization.js","components/custom-datepicker.js","components/campaigns.js","config.js","components/navigation.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","src","alt","Dropdown","style","color","onChange","setLanguage","options","key","text","value","placeholder","language","strings","LocalizedStrings","en","date","campaign","view","actions","viewPricing","csv","report","schedule","upcoming_campaigns","live_campaigns","past_campaigns","manage_campaigns","no_campaigns","close","days_ahead","days_ago","hi","CustomDatepicker","onClick","Strings","Campaigns","state","selectedCampaign","price","index","this","setState","campaigns","showPricing","Table","singleLine","id","Row","HeaderCell","Body","map","Cell","dateShow","Math","abs","duration","image_url","name","region","showPricingModal","selected","Date","createdOn","dateChange","customInput","length","Message","textAlign","Modal","size","open","onClose","Content","pricing","React","Component","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Navigation","Firebase","apps","initializeApp","loading","bind","database","ref","on","snapshot","val","parseCampaigns","error","console","formatDate","getDateDuration","getMonth","getFullYear","getDate","now","floor","UTC","Number","datePrint","set","panes","menuItem","render","Tab","Pane","filter","Loader","active","inline","menu","secondary","pointing","App","lang","localStorage","getItem","undefined","e","data","setItem","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.98ac83fb.chunk.js","sourcesContent":["import React from 'react';\r\n// import logo from '../logo.png';\r\nimport '../styles/header.css';\r\nimport {Dropdown} from 'semantic-ui-react';\r\n\r\nfunction Header(props) {\r\n    var options=[\r\n        { key: 1, text: 'English', value: 'en' },\r\n        { key: 2, text: 'हिन्दी', value: 'hi' },\r\n    ]\r\n\r\n    return (\r\n        <div className=\"header-container\">\r\n            <img src=\"./logo.png\" className=\"header-icon\" alt=\"bluestacks_logo\"/>\r\n            <Dropdown\r\n                style={{color:'white'}}\r\n                onChange={props.setLanguage}\r\n                options={options}\r\n                placeholder='Change Language'\r\n                value={props.language}\r\n          />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import LocalizedStrings from 'react-localization';\r\n\r\nlet strings = new LocalizedStrings({\r\n    en:{\r\n        date:\"DATE\",\r\n        campaign:\"CAMPAIGN\",\r\n        view:\"VIEW\",\r\n        actions:\"ACTIONS\",\r\n        viewPricing:\"View Pricing\",\r\n        csv:\"CSV\",\r\n        report:\"Report\",\r\n        schedule:\"Schedule Again\",\r\n        upcoming_campaigns:\"Upcoming Campaigns\",\r\n        live_campaigns:\"Live Campaigns\",\r\n        past_campaigns:\"Past Campaigns\",\r\n        manage_campaigns:\"Manage Campaigns\",\r\n        no_campaigns:\"No campaigns in this category! CHECK BACK LATER\",\r\n        close:\"CLOSE\",\r\n        days_ahead: \"Days Ahead\",\r\n        days_ago: \"Days Ago\",\r\n    },\r\n    hi: {\r\n        date:\"तारीख\",\r\n        campaign:\"अभियान\",\r\n        view:\"देखो\",\r\n        actions:\"क्रिया\",\r\n        viewPricing:\"मूल्य निर्धारण देखें\",\r\n        csv:\"CSV\",\r\n        report:\"विवरण\",\r\n        schedule:\"अनुसूची\",\r\n        upcoming_campaigns:\"आगामी अभियान\",\r\n        live_campaigns:\"वर्तमान अभियान\",\r\n        past_campaigns:\"पिछले अभियान\",\r\n        manage_campaigns:\"अभियान प्रबंधित करें\",\r\n        no_campaigns:\"इस श्रेणी में कोई अभियान नहीं! बाद में जांचें\",\r\n        close:\"बंद करे\",\r\n        days_ahead: \"दिनों के बाद\",\r\n        days_ago: \"दिन पहले\",\r\n    }\r\n});\r\n\r\nexport default strings;\r\n","import React from 'react';\r\nimport Strings from '../helpers/localization.js'\r\n\r\n//This is just a view for customised datepicker used via DatePicker in campaigns.js\r\nconst CustomDatepicker = ({ value, onClick }) => (\r\n    <span className=\"campaign-schedule\" onClick={onClick}>\r\n        <img src=\"./icons/calendar.png\" className=\"campaign-inline-icons\" alt=\"campaign-dateicon\"/>\r\n        {Strings.schedule}\r\n    </span>\r\n)\r\n\r\nexport default CustomDatepicker;\r\n","import React from 'react';\r\nimport {Table, Modal, Message} from 'semantic-ui-react';\r\nimport '../styles/campaigns.css';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport CustomDatepicker from \"./custom-datepicker\";\r\nimport Strings from '../helpers/localization.js'\r\n\r\nclass Campaigns extends React.Component {\r\n    // This Component Loads Data into the Campaign Table According to the selected category of campaign.\r\n    // The filtered campaigns are sent via props to this component.\r\n    constructor(props){\r\n        super(props)\r\n        //Initial selectedCampaign set as empty\r\n        this.state = {selectedCampaign:{price:[]}}\r\n    }\r\n    //Function to open pricing Popup on Click\r\n    showPricingModal(index) {\r\n        this.setState({\r\n            selectedCampaign: this.props.campaigns[index],\r\n            showPricing: true\r\n        })\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"campaign-container\">\r\n                <Table singleLine id=\"table-large\">\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>{Strings.date}</Table.HeaderCell>\r\n                            <Table.HeaderCell>{Strings.campaign}</Table.HeaderCell>\r\n                            <Table.HeaderCell>{Strings.view}</Table.HeaderCell>\r\n                            <Table.HeaderCell>{Strings.actions}</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n\r\n                    <Table.Body>\r\n                    {\r\n                        this.props.campaigns.map((campaign, index) => (\r\n                            <Table.Row key={index}>\r\n                                <Table.Cell>\r\n                                    <p className=\"campaign-date\">{campaign.dateShow}</p>\r\n                                    <p className=\"campaign-duration\">{Math.abs(campaign.duration) + \" \" + (campaign.duration > 0 ? Strings.days_ago : Strings.days_ahead)} </p>\r\n                                </Table.Cell>\r\n                                <Table.Cell>\r\n                                    <img src={campaign.image_url} className=\"campaign-image\" alt=\"campaign-logo\"/>\r\n                                    <div>\r\n                                        <p className=\"campaign-name\">{campaign.name}</p>\r\n                                        <p className=\"campaign-region\">{campaign.region}</p>\r\n                                    </div>\r\n                                </Table.Cell>\r\n                                <Table.Cell>\r\n                                    <span className=\"campaign-pricing\" onClick={() => this.showPricingModal(index)}>\r\n                                        <img src=\"./icons/price.png\" className=\"campaign-inline-icons\" alt=\"campaign-pricingicon\"/>\r\n                                        {Strings.viewPricing}\r\n                                    </span>\r\n                                </Table.Cell>\r\n                                <Table.Cell>\r\n                                    <span className=\"campaign-csv\">\r\n                                        <img src=\"./icons/file.png\" className=\"campaign-inline-icons\" alt=\"campaign-csvicon\"/>\r\n                                        {Strings.csv}\r\n                                    </span>\r\n                                    <span className=\"campaign-report\">\r\n                                        <img src=\"./icons/statistics-report.png\" className=\"campaign-inline-icons\" alt=\"campaign-reporticon\"/>\r\n                                        {Strings.report}\r\n                                    </span>\r\n                                    <DatePicker\r\n                                        selected={new Date(campaign.createdOn)}\r\n                                        onChange={date => this.props.dateChange(date, campaign.index)}\r\n                                        customInput={<CustomDatepicker/>}\r\n                                    />\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))\r\n                    }\r\n                    </Table.Body>\r\n                </Table>\r\n                <Table singleLine id=\"table-small\">\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>\r\n                                <div>{Strings.campaign}</div>\r\n                                <div>{Strings.date}</div>\r\n                            </Table.HeaderCell>\r\n                            <Table.HeaderCell>\r\n                                <div>{Strings.view}</div>\r\n                                <div>{Strings.actions}</div>\r\n                            </Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n\r\n                    <Table.Body>\r\n                    {\r\n                        this.props.campaigns.map((campaign, index) => (\r\n                            <Table.Row key={index}>\r\n                                <Table.Cell>\r\n                                    <div>\r\n                                        <img src={campaign.image_url} className=\"campaign-image\" alt=\"campaign-logo\"/>\r\n                                        <div>\r\n                                            <p className=\"campaign-name\">{campaign.name}</p>\r\n                                            <p className=\"campaign-region\">{campaign.region}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div>\r\n                                        <p className=\"campaign-date\">{campaign.dateShow}</p>\r\n                                        <p className=\"campaign-duration\">{Math.abs(campaign.duration) + \" \" + (campaign.duration > 0 ? Strings.days_ago : Strings.days_ahead)} </p>\r\n                                    </div>\r\n                                </Table.Cell>\r\n                                <Table.Cell>\r\n                                    <div>\r\n                                        <span className=\"campaign-pricing\" onClick={() => this.showPricingModal(index)}>\r\n                                            <img src=\"./icons/price.png\" className=\"campaign-inline-icons\" alt=\"campaign-pricingicon\"/>\r\n                                            {Strings.viewPricing}\r\n                                        </span>\r\n                                    </div>\r\n                                    <div>\r\n                                        <span className=\"campaign-csv\">\r\n                                            <img src=\"./icons/file.png\" className=\"campaign-inline-icons\" alt=\"campaign-csvicon\"/>\r\n                                            {Strings.csv}\r\n                                        </span>\r\n                                        <span className=\"campaign-report\">\r\n                                            <img src=\"./icons/statistics-report.png\" className=\"campaign-inline-icons\" alt=\"campaign-reporticon\"/>\r\n                                            {Strings.report}\r\n                                        </span>\r\n                                        <DatePicker\r\n                                            selected={new Date(campaign.createdOn)}\r\n                                            onChange={date => this.props.dateChange(date, campaign.index)}\r\n                                            customInput={<CustomDatepicker/>}\r\n                                        />\r\n                                    </div>\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))\r\n                    }\r\n                    </Table.Body>\r\n                </Table>\r\n                {\r\n                    this.props.campaigns.length === 0\r\n                    ?\r\n                    <Message style={{textAlign:'center'}}><Message.Header>{Strings.no_campaigns}</Message.Header></Message>\r\n                    :\r\n                    null\r\n                }\r\n                <Modal size={\"mini\"} open={this.state.showPricing} onClose={() => this.setState({showPricing: false})}>\r\n                    <Modal.Content>\r\n                        <img src={this.state.selectedCampaign.image_url} className=\"campaign-pricing-image\" alt=\"campaign-logo\"/>\r\n                        <div>\r\n                            <p className=\"campaign-pricing-name\">{this.state.selectedCampaign.name}</p>\r\n                            <p className=\"campaign-pricing-region\">{this.state.selectedCampaign.region}</p>\r\n                        </div>\r\n                        <p className=\"campaign-pricing-heading\">{Strings.viewPricing}</p>\r\n                        {\r\n                            this.state.selectedCampaign.price.map((pricing) => (\r\n                                <div className=\"campaign-pricing-price-container\">\r\n                                    <p>{pricing.name}</p>\r\n                                    <p>{\"$ \" + pricing.value}</p>\r\n                                </div>\r\n                            ))\r\n                        }\r\n                        <div className=\"campaign-pricing-close-button\" onClick={() => this.setState({showPricing: false})}>{Strings.close}</div>\r\n                    </Modal.Content>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Campaigns;\r\n","const config = {\r\n    apiKey: \"AIzaSyBB9VRqhr5X0QcAiuGrvnBVlkULwPxyCqw\",\r\n    authDomain: \"bluestacks-assignment.firebaseapp.com\",\r\n    databaseURL: \"https://bluestacks-assignment.firebaseio.com\",\r\n    projectId: \"bluestacks-assignment\",\r\n    storageBucket: \"bluestacks-assignment.appspot.com\",\r\n    messagingSenderId: \"992613303499\",\r\n    appId: \"1:992613303499:web:c508de132f17f21187474e\",\r\n    measurementId: \"G-90ND8B3E91\"\r\n}\r\n\r\nexport default config;\r\n","import React from 'react';\r\nimport { Tab, Loader } from 'semantic-ui-react'\r\nimport Campaigns from './campaigns.js';\r\nimport '../styles/navigation.css';\r\nimport Firebase from \"firebase\";\r\nimport config from \"../config.js\";\r\nimport Strings from '../helpers/localization.js'\r\n\r\nclass Navigation extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        if (!Firebase.apps.length) {\r\n            Firebase.initializeApp(config);\r\n        }\r\n        this.state = {\r\n            value: 0,\r\n            campaigns: [],\r\n            loading: true\r\n        }\r\n        this.dateChange = this.dateChange.bind(this)\r\n    }\r\n    componentDidMount(){\r\n        let campaigns = [];\r\n        //Get Campaigns from database, parse date and duaration and save to state.\r\n        let ref = Firebase.database().ref(\"campaigns/\");\r\n        ref.on(\"value\", snapshot => {\r\n            campaigns = snapshot.val();\r\n            campaigns = this.parseCampaigns(campaigns)\r\n            this.setState({\r\n                campaigns: campaigns,\r\n                loading: false\r\n            })\r\n        }, function(error) {\r\n            console.error(error);\r\n        });\r\n    }\r\n    //Format date and caldulate duration for each campaign\r\n    parseCampaigns(campaigns){\r\n        return campaigns.map((campaign, index) => {\r\n            return {\r\n                ...campaign,\r\n                index: index,\r\n                dateShow: this.formatDate(campaign.createdOn),\r\n                duration: this.getDateDuration(campaign.createdOn)\r\n            }\r\n        })\r\n    }\r\n    //Format date as required\r\n    formatDate(date){\r\n        date = new Date(date);\r\n        let month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"]\r\n        let datePrint = month[date.getMonth()] + \" \" + date.getFullYear() + \", \" + date.getDate();\r\n        return datePrint;\r\n    }\r\n    //Calculate date duration from today\r\n    getDateDuration(date){\r\n        let now = new Date();\r\n        date = new Date(date);\r\n        return Math.floor((Date.UTC(now.getFullYear(), now.getMonth(), now.getDate()) -\r\n        Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) ) /(1000 * 60 * 60 * 24));\r\n        // let diffDays = now.getDate() - date.getDate();\r\n        // return diffDays;\r\n    }\r\n    //Function called when date is changed from calendar\r\n    dateChange (date, id){\r\n        let campaigns = [...this.state.campaigns]\r\n        campaigns[id]['createdOn'] = Number(date)\r\n\r\n        //parseCampaigns: After date is changed, parse again for new formatting to desired date format and calculating duration\r\n        this.setState({\r\n            campaigns: this.parseCampaigns(campaigns)\r\n        })\r\n        let campaign = {...campaigns[id]}\r\n        delete campaign.datePrint\r\n        delete campaign.duration\r\n        delete campaign.index\r\n        //Push updated date to database.\r\n        Firebase.database().ref('campaigns/' + id).set(campaign);\r\n    }\r\n    render(){\r\n        //TABS SET AS PER CAMPAIGN TYPE, Which is dependent on campaign duration.\r\n        const panes = [\r\n            {\r\n                menuItem: Strings.upcoming_campaigns, render: () => <Tab.Pane>\r\n                <Campaigns campaigns={this.state.campaigns.filter((campaign) => campaign.duration < 0)}\r\n                dateChange={this.dateChange}/>\r\n                </Tab.Pane>\r\n            },\r\n            {\r\n                menuItem: Strings.live_campaigns, render: () => <Tab.Pane>\r\n                <Campaigns campaigns={this.state.campaigns.filter((campaign) => campaign.duration === 0)}\r\n                dateChange={this.dateChange}/>\r\n                </Tab.Pane>\r\n            },\r\n            {\r\n                menuItem: Strings.past_campaigns, render: () => <Tab.Pane>\r\n                <Campaigns campaigns={this.state.campaigns.filter((campaign) => campaign.duration > 0)}\r\n                dateChange={this.dateChange}/>\r\n                </Tab.Pane>\r\n            },\r\n        ]\r\n\r\n        return(\r\n            <div className=\"navigation-container\">\r\n                <h1>{Strings.manage_campaigns}</h1>\r\n                {\r\n                    this.state.loading\r\n                    ?\r\n                    <Loader active inline='centered' />\r\n                    :\r\n                    <Tab menu={{ color: 'orange', secondary: true, pointing: true }} panes={panes} />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Navigation;\r\n","import React from 'react';\nimport './App.css';\nimport Header from './components/header.js';\nimport Navigation from './components/navigation.js';\nimport Strings from './helpers/localization.js'\n\nclass App extends React.Component {\n    constructor(props){\n        super(props);\n        //Initial Default Language Initialised\n        this.state = {\n            language: 'en'\n        }\n        this.setLanguage = this.setLanguage.bind(this);\n    }\n    componentDidMount(){\n        //Check if previously stored language is stored in storage. If YES? Change language accordingly.\n        let lang = localStorage.getItem('language')\n        if(lang){\n            this.setLanguage(undefined, {value:lang})\n        }\n    }\n    //Function to Change Language when selected from dropdown.\n    setLanguage(e, data){\n        Strings.setLanguage(data.value);\n        localStorage.setItem('language', data.value);\n        this.setState({\n            language: data.value\n        })\n    }\n    render(){\n        return (\n            <div className=\"App\">\n                <Header setLanguage={this.setLanguage} language={this.state.language}/>\n                <div className=\"body-container\">\n                    <Navigation/>\n                </div>\n            </div>\n        )\n    };\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}