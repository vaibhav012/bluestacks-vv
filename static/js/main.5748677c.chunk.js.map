{"version":3,"sources":["logo.png","components/header.js","components/custom-datepicker.js","components/campaigns.js","config.js","components/navigation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","CustomDatepicker","value","onClick","Campaigns","props","inputElement","state","selectedCampaign","price","campaigns","forEach","item","i","React","createRef","index","this","setState","showPricing","Table","singleLine","Row","HeaderCell","Body","map","campaign","key","Cell","unstackable","dateShow","Math","abs","duration","image_url","name","region","showPricingModal","stackable","selected","Date","createdOn","onChange","date","dateChange","customInput","length","Message","style","textAlign","Modal","size","open","onClose","Content","pricing","Component","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Navigation","tabChange","event","console","log","Firebase","apps","initializeApp","loading","bind","database","ref","on","snapshot","val","parseCampaigns","error","formatDate","getDateDuration","getMonth","getFullYear","getDate","now","floor","UTC","Number","datePrint","set","panes","menuItem","render","Tab","Pane","filter","Loader","active","inline","menu","color","secondary","pointing","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5748677c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0edceb8c.png\";","import React from 'react';\r\nimport logo from '../logo.png';\r\nimport '../styles/header.css';\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"header-container\">\r\n            <img src={logo} className=\"header-icon\" alt=\"bluestacks_logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nfunction CustomDatepicker({ value, onClick }) {\r\n    return (\r\n        <span className=\"campaign-schedule\" onClick={onClick}>\r\n            <img src=\"./calendar.png\" className=\"campaign-inline-icons\" alt=\"campaign-dateicon\"/>\r\n            Schedule Again\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default CustomDatepicker;\r\n","import React from 'react';\r\nimport {Table, Modal, Message} from 'semantic-ui-react';\r\nimport '../styles/campaigns.css';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport CustomDatepicker from \"./custom-datepicker\";\r\n\r\nclass Campaigns extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.inputElement = []\r\n        this.state = {selectedCampaign:{price:[]}}\r\n    }\r\n    componentDidMount(){\r\n    }\r\n    shouldComponentUpdate(props, state){\r\n        props.campaigns.forEach((item, i) => {\r\n            this.inputElement[i] = React.createRef();\r\n        });\r\n        return true;\r\n    }\r\n    showPricingModal(index) {\r\n        this.setState({\r\n            selectedCampaign: this.props.campaigns[index],\r\n            showPricing: true\r\n        })\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"campaign-container\">\r\n                <Table singleLine>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>DATE</Table.HeaderCell>\r\n                            <Table.HeaderCell>CAMPAIGN</Table.HeaderCell>\r\n                            <Table.HeaderCell>VIEW</Table.HeaderCell>\r\n                            <Table.HeaderCell>ACTIONS</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n\r\n                    <Table.Body>\r\n                    {\r\n                        this.props.campaigns.map((campaign, index) => (\r\n                            <Table.Row key={index}>\r\n                                <Table.Cell unstackable>\r\n                                    <p className=\"campaign-date\">{campaign.dateShow}</p>\r\n                                    <p className=\"campaign-duration\">{Math.abs(campaign.duration) + \" \" + (campaign.duration > 0 ? \"Days Ago\" : \"Days Ahead\")} </p>\r\n                                </Table.Cell>\r\n                                <Table.Cell unstackable>\r\n                                    <img src={campaign.image_url} className=\"campaign-image\" alt=\"campaign-logo\"/>\r\n                                    <div>\r\n                                        <p className=\"campaign-name\">{campaign.name}</p>\r\n                                        <p className=\"campaign-region\">{campaign.region}</p>\r\n                                    </div>\r\n                                </Table.Cell>\r\n                                <Table.Cell unstackable>\r\n                                    <span className=\"campaign-pricing\" onClick={() => this.showPricingModal(index)}>\r\n                                        <img src=\"./price.png\" className=\"campaign-inline-icons\" alt=\"campaign-pricingicon\"/>\r\n                                        View Pricing\r\n                                    </span>\r\n                                </Table.Cell>\r\n                                <Table.Cell stackable>\r\n                                    <span className=\"campaign-csv\">\r\n                                        <img src=\"./file.png\" className=\"campaign-inline-icons\" alt=\"campaign-csvicon\"/>\r\n                                        CSV\r\n                                    </span>\r\n                                    <span className=\"campaign-report\">\r\n                                        <img src=\"./statistics-report.png\" className=\"campaign-inline-icons\" alt=\"campaign-reporticon\"/>\r\n                                        Report\r\n                                    </span>\r\n                                    <DatePicker\r\n                                        selected={new Date(campaign.createdOn)}\r\n                                        onChange={date => this.props.dateChange(date, campaign.index)}\r\n                                        customInput={<CustomDatepicker/>}\r\n                                    />\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))\r\n                    }\r\n                    </Table.Body>\r\n                    </Table>\r\n                {\r\n                    this.props.campaigns.length === 0\r\n                    ?\r\n                    <Message style={{textAlign:'center'}}><Message.Header>No campaigns in this category! CHECK BACK LATER</Message.Header></Message>\r\n                    :\r\n                    null\r\n                }\r\n                <Modal size={\"mini\"} open={this.state.showPricing} onClose={() => this.setState({showPricing: false})}>\r\n                    <Modal.Content>\r\n                        <img src={this.state.selectedCampaign.image_url} className=\"campaign-pricing-image\" alt=\"campaign-logo\"/>\r\n                        <div>\r\n                            <p className=\"campaign-pricing-name\">{this.state.selectedCampaign.name}</p>\r\n                            <p className=\"campaign-pricing-region\">{this.state.selectedCampaign.region}</p>\r\n                        </div>\r\n                        <p className=\"campaign-pricing-heading\">Pricing</p>\r\n                        {\r\n                            this.state.selectedCampaign.price.map((pricing) => (\r\n                                <div className=\"campaign-pricing-price-container\">\r\n                                    <p>{pricing.name}</p>\r\n                                    <p>{\"$ \" + pricing.value}</p>\r\n                                </div>\r\n                            ))\r\n                        }\r\n                        <div className=\"campaign-pricing-close-button\" onClick={() => this.setState({showPricing: false})}>CLOSE</div>\r\n                    </Modal.Content>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Campaigns;\r\n","const config = {\r\n    apiKey: \"AIzaSyBB9VRqhr5X0QcAiuGrvnBVlkULwPxyCqw\",\r\n    authDomain: \"bluestacks-assignment.firebaseapp.com\",\r\n    databaseURL: \"https://bluestacks-assignment.firebaseio.com\",\r\n    projectId: \"bluestacks-assignment\",\r\n    storageBucket: \"bluestacks-assignment.appspot.com\",\r\n    messagingSenderId: \"992613303499\",\r\n    appId: \"1:992613303499:web:c508de132f17f21187474e\",\r\n    measurementId: \"G-90ND8B3E91\"\r\n}\r\n\r\nexport default config;\r\n","import React from 'react';\r\nimport { Tab, Loader } from 'semantic-ui-react'\r\nimport Campaigns from './campaigns.js';\r\nimport '../styles/navigation.css';\r\nimport Firebase from \"firebase\";\r\nimport config from \"../config.js\";\r\n\r\nclass Navigation extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        if (!Firebase.apps.length) {\r\n            Firebase.initializeApp(config);\r\n        }\r\n        this.state = {\r\n            value: 0,\r\n            campaigns: [],\r\n            loading: true\r\n        }\r\n        this.dateChange = this.dateChange.bind(this)\r\n    }\r\n    componentDidMount(){\r\n        let campaigns = [];\r\n        let ref = Firebase.database().ref(\"campaigns/\");\r\n        ref.on(\"value\", snapshot => {\r\n            campaigns = snapshot.val();\r\n            campaigns = this.parseCampaigns(campaigns)\r\n            this.setState({\r\n                campaigns: campaigns,\r\n                loading: false\r\n            })\r\n        }, function(error) {\r\n            console.error(error);\r\n        });\r\n    }\r\n    tabChange = (event, value) => {\r\n        console.log(event)\r\n        this.setState({\r\n            value: value\r\n        })\r\n    }\r\n    parseCampaigns(campaigns){\r\n        return campaigns.map((campaign, index) => {\r\n            return {\r\n                ...campaign,\r\n                index: index,\r\n                dateShow: this.formatDate(campaign.createdOn),\r\n                duration: this.getDateDuration(campaign.createdOn)\r\n            }\r\n        })\r\n    }\r\n    formatDate(date){\r\n        date = new Date(date);\r\n        let month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"]\r\n        let datePrint = month[date.getMonth()] + \" \" + date.getFullYear() + \", \" + date.getDate();\r\n        return datePrint;\r\n    }\r\n    getDateDuration(date){\r\n        let now = new Date();\r\n        date = new Date(date);\r\n        return Math.floor((Date.UTC(now.getFullYear(), now.getMonth(), now.getDate()) -\r\n        Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) ) /(1000 * 60 * 60 * 24));\r\n        // let diffDays = now.getDate() - date.getDate();\r\n        // return diffDays;\r\n    }\r\n    dateChange (date, index){\r\n        let campaigns = [...this.state.campaigns]\r\n        campaigns[index]['createdOn'] = Number(date)\r\n\r\n        this.setState({\r\n            campaigns: this.parseCampaigns(campaigns)\r\n        })\r\n        let campaign = {...campaigns[index]}\r\n        delete campaign.datePrint\r\n        delete campaign.duration\r\n        delete campaign.index\r\n        Firebase.database().ref('campaigns/' + index).set(campaign);\r\n    }\r\n    render(){\r\n        const panes = [\r\n            {\r\n                menuItem: 'Upcoming Campaigns', render: () => <Tab.Pane>\r\n                <Campaigns campaigns={this.state.campaigns.filter((campaign) => campaign.duration < 0)}\r\n                dateChange={this.dateChange}/>\r\n                </Tab.Pane>\r\n            },\r\n            {\r\n                menuItem: 'Live Campaigns', render: () => <Tab.Pane>\r\n                <Campaigns campaigns={this.state.campaigns.filter((campaign) => campaign.duration === 0)}\r\n                dateChange={this.dateChange}/>\r\n                </Tab.Pane>\r\n            },\r\n            {\r\n                menuItem: 'Past Campaigns', render: () => <Tab.Pane>\r\n                <Campaigns campaigns={this.state.campaigns.filter((campaign) => campaign.duration > 0)}\r\n                dateChange={this.dateChange}/>\r\n                </Tab.Pane>\r\n            },\r\n        ]\r\n\r\n        return(\r\n            <div className=\"navigation-container\">\r\n            {\r\n                this.state.loading\r\n                ?\r\n                <Loader active inline='centered' />\r\n                :\r\n                <Tab menu={{ color: 'orange', secondary: true, pointing: true }} panes={panes} />\r\n            }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Navigation;\r\n","import React from 'react';\nimport './App.css';\nimport Header from './components/header.js';\nimport Navigation from './components/navigation.js';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <div className=\"body-container\">\n                <h1>Manage Campaigns</h1>\n                <Navigation/>\n            </div>\n        </div>\n    );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}